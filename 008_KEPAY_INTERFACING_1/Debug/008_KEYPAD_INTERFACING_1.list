
008_KEYPAD_INTERFACING_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010c4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  0800125c  0800125c  0001125c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001400  08001400  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001400  08001400  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001400  08001400  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001400  08001400  00011400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001404  08001404  00011404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  0800146c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  0800146c  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a18  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000308  00000000  00000000  00020aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000118  00000000  00000000  00020db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e0  00000000  00000000  00020ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002bf2  00000000  00000000  00020fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001504  00000000  00000000  00023ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000093ba  00000000  00000000  000250a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002e460  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a1c  00000000  00000000  0002e4b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000064 	.word	0x20000064
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001244 	.word	0x08001244

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000068 	.word	0x20000068
 80001d4:	08001244 	.word	0x08001244

080001d8 <main>:
#include <stdint.h>
#include <stdio.h>
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b08a      	sub	sp, #40	; 0x28
 80001dc:	af00      	add	r7, sp, #0
	// Address Offset value for Peripheral Clock enable register - 0x30
	// Final required address for enabling the GPIo is
	// 0x4002 3800 + 0x30 = (0x40023800+0x30)+
	// Data to be given at that address is 0x1001 = 9;
	// Data |= 0x1001<<0 (Or used for setting the bits)
    int32_t volatile *RCC_ENABLE = (int32_t*)(0x40023800+0x30);
 80001de:	4bab      	ldr	r3, [pc, #684]	; (800048c <main+0x2b4>)
 80001e0:	623b      	str	r3, [r7, #32]
    *RCC_ENABLE |= 0x0001<<0; // Enabling the clock for GPIO A and GPIO D
 80001e2:	6a3b      	ldr	r3, [r7, #32]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f043 0201 	orr.w	r2, r3, #1
 80001ea:	6a3b      	ldr	r3, [r7, #32]
 80001ec:	601a      	str	r2, [r3, #0]
    *RCC_ENABLE |= 0x0001<<3; // Enabling the clock for GPIO A and GPIO D
 80001ee:	6a3b      	ldr	r3, [r7, #32]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f043 0208 	orr.w	r2, r3, #8
 80001f6:	6a3b      	ldr	r3, [r7, #32]
 80001f8:	601a      	str	r2, [r3, #0]
    // We are using PA (rows) as output and PD (column) as Output
    // Base Address of Port A = 0x4002 0000 - OUTPUT
    // Address Offset of Mode Register of GPIO is 0x00
    // Therefore the final Address is (0x40020000+0x00)
    // Data to be inserted into the register is 0X01010101<<0 (Using |)
    int32_t volatile *MODE_A = (int32_t*)(0x40020000+0x00);
 80001fa:	4ba5      	ldr	r3, [pc, #660]	; (8000490 <main+0x2b8>)
 80001fc:	61fb      	str	r3, [r7, #28]
    *MODE_A |= 0x0001<<0;
 80001fe:	69fb      	ldr	r3, [r7, #28]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f043 0201 	orr.w	r2, r3, #1
 8000206:	69fb      	ldr	r3, [r7, #28]
 8000208:	601a      	str	r2, [r3, #0]
    *MODE_A |= 0x0001<<2;
 800020a:	69fb      	ldr	r3, [r7, #28]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f043 0204 	orr.w	r2, r3, #4
 8000212:	69fb      	ldr	r3, [r7, #28]
 8000214:	601a      	str	r2, [r3, #0]
    *MODE_A |= 0x0001<<4;
 8000216:	69fb      	ldr	r3, [r7, #28]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f043 0210 	orr.w	r2, r3, #16
 800021e:	69fb      	ldr	r3, [r7, #28]
 8000220:	601a      	str	r2, [r3, #0]
    *MODE_A |= 0x0001<<6;
 8000222:	69fb      	ldr	r3, [r7, #28]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800022a:	69fb      	ldr	r3, [r7, #28]
 800022c:	601a      	str	r2, [r3, #0]
    // Defining the mode of PD - INPUT
    // Base Address of Port D = 0x4002 0C00
    // Address Offset of Mode Register of GPIO is 0x00
    // Therefore the final Address is (0x40020C00+0x00)
    // Data to be inserted into the register is 0X00000000 (Using &)
    int32_t volatile *MODE_D = (int32_t*)(0x40020C00+0x00);
 800022e:	4b99      	ldr	r3, [pc, #612]	; (8000494 <main+0x2bc>)
 8000230:	61bb      	str	r3, [r7, #24]
    *MODE_D &= 0x0000<<0;
 8000232:	69bb      	ldr	r3, [r7, #24]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	69bb      	ldr	r3, [r7, #24]
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]

    // 3) Writing to the PA port

    // Address of Output register =  0x40020000+0x14
    int32_t volatile *OUTPUT_A = (int32_t*)(0x40020000+0x14);
 800023c:	4b96      	ldr	r3, [pc, #600]	; (8000498 <main+0x2c0>)
 800023e:	617b      	str	r3, [r7, #20]
    int8_t volatile i = 0;
 8000240:	2300      	movs	r3, #0
 8000242:	71fb      	strb	r3, [r7, #7]

    // 4) Reading to the PD port

    // Address of Output register =  0x40020C00+0x10
    int32_t volatile *INPUT_D = (int32_t*)(0x40020C00+0x10);
 8000244:	4b95      	ldr	r3, [pc, #596]	; (800049c <main+0x2c4>)
 8000246:	613b      	str	r3, [r7, #16]
    int32_t input_data;
    int32_t output_data;
    uint32_t delay=0;
 8000248:	2300      	movs	r3, #0
 800024a:	627b      	str	r3, [r7, #36]	; 0x24
//----------------------------------------------------------------------------------------------------------

    while(1)
    {
    // 5) Write output to the port A
    for(i=0;i<4;i++)
 800024c:	2300      	movs	r3, #0
 800024e:	71fb      	strb	r3, [r7, #7]
 8000250:	e1c1      	b.n	80005d6 <main+0x3fe>
    {
    	*OUTPUT_A |= 0x0001<<i;
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	b25b      	sxtb	r3, r3
 8000256:	461a      	mov	r2, r3
 8000258:	2301      	movs	r3, #1
 800025a:	fa03 f202 	lsl.w	r2, r3, r2
 800025e:	697b      	ldr	r3, [r7, #20]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	431a      	orrs	r2, r3
 8000264:	697b      	ldr	r3, [r7, #20]
 8000266:	601a      	str	r2, [r3, #0]
    	//printf("The value of i is %d\n",*OUTPUT_A);
    	//printf("*INPUT_D = %d\n",*INPUT_D);
    	output_data = (*OUTPUT_A);
 8000268:	697b      	ldr	r3, [r7, #20]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	60fb      	str	r3, [r7, #12]
    	output_data &= 0x000f;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	f003 030f 	and.w	r3, r3, #15
 8000274:	60fb      	str	r3, [r7, #12]
    	input_data =  (*INPUT_D);
 8000276:	693b      	ldr	r3, [r7, #16]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	60bb      	str	r3, [r7, #8]
    	input_data &= 0x000f;
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	f003 030f 	and.w	r3, r3, #15
 8000282:	60bb      	str	r3, [r7, #8]
    	//printf("input_data = %d\n",input_data);
    // 6) Read input from the port D
    	if(input_data !=0)
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	2b00      	cmp	r3, #0
 8000288:	f000 819e 	beq.w	80005c8 <main+0x3f0>
    	{
    	switch(input_data)
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	3b01      	subs	r3, #1
 8000290:	2b07      	cmp	r3, #7
 8000292:	f200 818f 	bhi.w	80005b4 <main+0x3dc>
 8000296:	a201      	add	r2, pc, #4	; (adr r2, 800029c <main+0xc4>)
 8000298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800029c:	080002bd 	.word	0x080002bd
 80002a0:	08000367 	.word	0x08000367
 80002a4:	080005b5 	.word	0x080005b5
 80002a8:	08000413 	.word	0x08000413
 80002ac:	080005b5 	.word	0x080005b5
 80002b0:	080005b5 	.word	0x080005b5
 80002b4:	080005b5 	.word	0x080005b5
 80002b8:	080004ff 	.word	0x080004ff
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	3b01      	subs	r3, #1
 80002c0:	2b07      	cmp	r3, #7
 80002c2:	f200 8170 	bhi.w	80005a6 <main+0x3ce>
 80002c6:	a201      	add	r2, pc, #4	; (adr r2, 80002cc <main+0xf4>)
 80002c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002cc:	080002ed 	.word	0x080002ed
 80002d0:	0800030b 	.word	0x0800030b
 80002d4:	080005a7 	.word	0x080005a7
 80002d8:	08000329 	.word	0x08000329
 80002dc:	080005a7 	.word	0x080005a7
 80002e0:	080005a7 	.word	0x080005a7
 80002e4:	080005a7 	.word	0x080005a7
 80002e8:	08000347 	.word	0x08000347
    	{
    	case 1:
    		switch(output_data)
    		{
    		 case 1: printf("ROW:1 COL:1 CHAR:1 \n"); for(delay=0;delay<30000;delay++); break;
 80002ec:	486c      	ldr	r0, [pc, #432]	; (80004a0 <main+0x2c8>)
 80002ee:	f000 fb19 	bl	8000924 <puts>
 80002f2:	2300      	movs	r3, #0
 80002f4:	627b      	str	r3, [r7, #36]	; 0x24
 80002f6:	e002      	b.n	80002fe <main+0x126>
 80002f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002fa:	3301      	adds	r3, #1
 80002fc:	627b      	str	r3, [r7, #36]	; 0x24
 80002fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000300:	f247 522f 	movw	r2, #29999	; 0x752f
 8000304:	4293      	cmp	r3, r2
 8000306:	d9f7      	bls.n	80002f8 <main+0x120>
 8000308:	e02c      	b.n	8000364 <main+0x18c>
    		 case 2: printf("ROW:2 COL:1 CHAR:4 \n"); for(delay=0;delay<30000;delay++); break;
 800030a:	4866      	ldr	r0, [pc, #408]	; (80004a4 <main+0x2cc>)
 800030c:	f000 fb0a 	bl	8000924 <puts>
 8000310:	2300      	movs	r3, #0
 8000312:	627b      	str	r3, [r7, #36]	; 0x24
 8000314:	e002      	b.n	800031c <main+0x144>
 8000316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000318:	3301      	adds	r3, #1
 800031a:	627b      	str	r3, [r7, #36]	; 0x24
 800031c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800031e:	f247 522f 	movw	r2, #29999	; 0x752f
 8000322:	4293      	cmp	r3, r2
 8000324:	d9f7      	bls.n	8000316 <main+0x13e>
 8000326:	e01d      	b.n	8000364 <main+0x18c>
    		 case 4: printf("ROW:3 COL:1 CHAR:7 \n"); for(delay=0;delay<30000;delay++); break;
 8000328:	485f      	ldr	r0, [pc, #380]	; (80004a8 <main+0x2d0>)
 800032a:	f000 fafb 	bl	8000924 <puts>
 800032e:	2300      	movs	r3, #0
 8000330:	627b      	str	r3, [r7, #36]	; 0x24
 8000332:	e002      	b.n	800033a <main+0x162>
 8000334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000336:	3301      	adds	r3, #1
 8000338:	627b      	str	r3, [r7, #36]	; 0x24
 800033a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800033c:	f247 522f 	movw	r2, #29999	; 0x752f
 8000340:	4293      	cmp	r3, r2
 8000342:	d9f7      	bls.n	8000334 <main+0x15c>
 8000344:	e00e      	b.n	8000364 <main+0x18c>
    		 case 8: printf("ROW:4 COL:1 CHAR:* \n"); for(delay=0;delay<30000;delay++); break;
 8000346:	4859      	ldr	r0, [pc, #356]	; (80004ac <main+0x2d4>)
 8000348:	f000 faec 	bl	8000924 <puts>
 800034c:	2300      	movs	r3, #0
 800034e:	627b      	str	r3, [r7, #36]	; 0x24
 8000350:	e002      	b.n	8000358 <main+0x180>
 8000352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000354:	3301      	adds	r3, #1
 8000356:	627b      	str	r3, [r7, #36]	; 0x24
 8000358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800035a:	f247 522f 	movw	r2, #29999	; 0x752f
 800035e:	4293      	cmp	r3, r2
 8000360:	d9f7      	bls.n	8000352 <main+0x17a>
 8000362:	bf00      	nop
    		}
    		break;
 8000364:	e11f      	b.n	80005a6 <main+0x3ce>
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	3b01      	subs	r3, #1
 800036a:	2b07      	cmp	r3, #7
 800036c:	f200 811d 	bhi.w	80005aa <main+0x3d2>
 8000370:	a201      	add	r2, pc, #4	; (adr r2, 8000378 <main+0x1a0>)
 8000372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000376:	bf00      	nop
 8000378:	08000399 	.word	0x08000399
 800037c:	080003b7 	.word	0x080003b7
 8000380:	080005ab 	.word	0x080005ab
 8000384:	080003d5 	.word	0x080003d5
 8000388:	080005ab 	.word	0x080005ab
 800038c:	080005ab 	.word	0x080005ab
 8000390:	080005ab 	.word	0x080005ab
 8000394:	080003f3 	.word	0x080003f3
    	case 2:
    		switch(output_data)
    		{
    		 case 1: printf("ROW:1 COL:2 CHAR:2 \n"); for(delay=0;delay<30000;delay++); break;
 8000398:	4845      	ldr	r0, [pc, #276]	; (80004b0 <main+0x2d8>)
 800039a:	f000 fac3 	bl	8000924 <puts>
 800039e:	2300      	movs	r3, #0
 80003a0:	627b      	str	r3, [r7, #36]	; 0x24
 80003a2:	e002      	b.n	80003aa <main+0x1d2>
 80003a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003a6:	3301      	adds	r3, #1
 80003a8:	627b      	str	r3, [r7, #36]	; 0x24
 80003aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ac:	f247 522f 	movw	r2, #29999	; 0x752f
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d9f7      	bls.n	80003a4 <main+0x1cc>
 80003b4:	e02c      	b.n	8000410 <main+0x238>
    		 case 2: printf("ROW:2 COL:2 CHAR:5 \n"); for(delay=0;delay<30000;delay++); break;
 80003b6:	483f      	ldr	r0, [pc, #252]	; (80004b4 <main+0x2dc>)
 80003b8:	f000 fab4 	bl	8000924 <puts>
 80003bc:	2300      	movs	r3, #0
 80003be:	627b      	str	r3, [r7, #36]	; 0x24
 80003c0:	e002      	b.n	80003c8 <main+0x1f0>
 80003c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003c4:	3301      	adds	r3, #1
 80003c6:	627b      	str	r3, [r7, #36]	; 0x24
 80003c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ca:	f247 522f 	movw	r2, #29999	; 0x752f
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d9f7      	bls.n	80003c2 <main+0x1ea>
 80003d2:	e01d      	b.n	8000410 <main+0x238>
    		 case 4: printf("ROW:3 COL:2 CHAR:8 \n"); for(delay=0;delay<30000;delay++); break;
 80003d4:	4838      	ldr	r0, [pc, #224]	; (80004b8 <main+0x2e0>)
 80003d6:	f000 faa5 	bl	8000924 <puts>
 80003da:	2300      	movs	r3, #0
 80003dc:	627b      	str	r3, [r7, #36]	; 0x24
 80003de:	e002      	b.n	80003e6 <main+0x20e>
 80003e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003e2:	3301      	adds	r3, #1
 80003e4:	627b      	str	r3, [r7, #36]	; 0x24
 80003e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003e8:	f247 522f 	movw	r2, #29999	; 0x752f
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d9f7      	bls.n	80003e0 <main+0x208>
 80003f0:	e00e      	b.n	8000410 <main+0x238>
    		 case 8: printf("ROW:4 COL:2 CHAR:0 \n"); for(delay=0;delay<30000;delay++); break;
 80003f2:	4832      	ldr	r0, [pc, #200]	; (80004bc <main+0x2e4>)
 80003f4:	f000 fa96 	bl	8000924 <puts>
 80003f8:	2300      	movs	r3, #0
 80003fa:	627b      	str	r3, [r7, #36]	; 0x24
 80003fc:	e002      	b.n	8000404 <main+0x22c>
 80003fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000400:	3301      	adds	r3, #1
 8000402:	627b      	str	r3, [r7, #36]	; 0x24
 8000404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000406:	f247 522f 	movw	r2, #29999	; 0x752f
 800040a:	4293      	cmp	r3, r2
 800040c:	d9f7      	bls.n	80003fe <main+0x226>
 800040e:	bf00      	nop
    		}
    		break;
 8000410:	e0cb      	b.n	80005aa <main+0x3d2>
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	3b01      	subs	r3, #1
 8000416:	2b07      	cmp	r3, #7
 8000418:	f200 80c9 	bhi.w	80005ae <main+0x3d6>
 800041c:	a201      	add	r2, pc, #4	; (adr r2, 8000424 <main+0x24c>)
 800041e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000422:	bf00      	nop
 8000424:	08000445 	.word	0x08000445
 8000428:	08000463 	.word	0x08000463
 800042c:	080005af 	.word	0x080005af
 8000430:	08000481 	.word	0x08000481
 8000434:	080005af 	.word	0x080005af
 8000438:	080005af 	.word	0x080005af
 800043c:	080005af 	.word	0x080005af
 8000440:	080004df 	.word	0x080004df
    	case 4:
    		switch(output_data)
    		{
    		 case 1: printf("ROW:1 COL:3 CHAR:3 \n"); for(delay=0;delay<30000;delay++); break;
 8000444:	481e      	ldr	r0, [pc, #120]	; (80004c0 <main+0x2e8>)
 8000446:	f000 fa6d 	bl	8000924 <puts>
 800044a:	2300      	movs	r3, #0
 800044c:	627b      	str	r3, [r7, #36]	; 0x24
 800044e:	e002      	b.n	8000456 <main+0x27e>
 8000450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000452:	3301      	adds	r3, #1
 8000454:	627b      	str	r3, [r7, #36]	; 0x24
 8000456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000458:	f247 522f 	movw	r2, #29999	; 0x752f
 800045c:	4293      	cmp	r3, r2
 800045e:	d9f7      	bls.n	8000450 <main+0x278>
 8000460:	e04c      	b.n	80004fc <main+0x324>
    		 case 2: printf("ROW:2 COL:3 CHAR:6 \n"); for(delay=0;delay<30000;delay++); break;
 8000462:	4818      	ldr	r0, [pc, #96]	; (80004c4 <main+0x2ec>)
 8000464:	f000 fa5e 	bl	8000924 <puts>
 8000468:	2300      	movs	r3, #0
 800046a:	627b      	str	r3, [r7, #36]	; 0x24
 800046c:	e002      	b.n	8000474 <main+0x29c>
 800046e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000470:	3301      	adds	r3, #1
 8000472:	627b      	str	r3, [r7, #36]	; 0x24
 8000474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000476:	f247 522f 	movw	r2, #29999	; 0x752f
 800047a:	4293      	cmp	r3, r2
 800047c:	d9f7      	bls.n	800046e <main+0x296>
 800047e:	e03d      	b.n	80004fc <main+0x324>
    		 case 4: printf("ROW:3 COL:3 CHAR:9 \n"); for(delay=0;delay<30000;delay++); break;
 8000480:	4811      	ldr	r0, [pc, #68]	; (80004c8 <main+0x2f0>)
 8000482:	f000 fa4f 	bl	8000924 <puts>
 8000486:	2300      	movs	r3, #0
 8000488:	627b      	str	r3, [r7, #36]	; 0x24
 800048a:	e022      	b.n	80004d2 <main+0x2fa>
 800048c:	40023830 	.word	0x40023830
 8000490:	40020000 	.word	0x40020000
 8000494:	40020c00 	.word	0x40020c00
 8000498:	40020014 	.word	0x40020014
 800049c:	40020c10 	.word	0x40020c10
 80004a0:	0800125c 	.word	0x0800125c
 80004a4:	08001270 	.word	0x08001270
 80004a8:	08001284 	.word	0x08001284
 80004ac:	08001298 	.word	0x08001298
 80004b0:	080012ac 	.word	0x080012ac
 80004b4:	080012c0 	.word	0x080012c0
 80004b8:	080012d4 	.word	0x080012d4
 80004bc:	080012e8 	.word	0x080012e8
 80004c0:	080012fc 	.word	0x080012fc
 80004c4:	08001310 	.word	0x08001310
 80004c8:	08001324 	.word	0x08001324
 80004cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ce:	3301      	adds	r3, #1
 80004d0:	627b      	str	r3, [r7, #36]	; 0x24
 80004d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004d4:	f247 522f 	movw	r2, #29999	; 0x752f
 80004d8:	4293      	cmp	r3, r2
 80004da:	d9f7      	bls.n	80004cc <main+0x2f4>
 80004dc:	e00e      	b.n	80004fc <main+0x324>
    		 case 8: printf("ROW:4 COL:3 CHAR:# \n"); for(delay=0;delay<30000;delay++); break;
 80004de:	4841      	ldr	r0, [pc, #260]	; (80005e4 <main+0x40c>)
 80004e0:	f000 fa20 	bl	8000924 <puts>
 80004e4:	2300      	movs	r3, #0
 80004e6:	627b      	str	r3, [r7, #36]	; 0x24
 80004e8:	e002      	b.n	80004f0 <main+0x318>
 80004ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ec:	3301      	adds	r3, #1
 80004ee:	627b      	str	r3, [r7, #36]	; 0x24
 80004f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004f2:	f247 522f 	movw	r2, #29999	; 0x752f
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d9f7      	bls.n	80004ea <main+0x312>
 80004fa:	bf00      	nop
    		}
    		break;
 80004fc:	e057      	b.n	80005ae <main+0x3d6>
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	3b01      	subs	r3, #1
 8000502:	2b07      	cmp	r3, #7
 8000504:	d855      	bhi.n	80005b2 <main+0x3da>
 8000506:	a201      	add	r2, pc, #4	; (adr r2, 800050c <main+0x334>)
 8000508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050c:	0800052d 	.word	0x0800052d
 8000510:	0800054b 	.word	0x0800054b
 8000514:	080005b3 	.word	0x080005b3
 8000518:	08000569 	.word	0x08000569
 800051c:	080005b3 	.word	0x080005b3
 8000520:	080005b3 	.word	0x080005b3
 8000524:	080005b3 	.word	0x080005b3
 8000528:	08000587 	.word	0x08000587
    	case 8:
    		switch(output_data)
    		{
    		 case 1: printf("ROW:1 COL:4 CHAR:A \n"); for(delay=0;delay<30000;delay++); break;
 800052c:	482e      	ldr	r0, [pc, #184]	; (80005e8 <main+0x410>)
 800052e:	f000 f9f9 	bl	8000924 <puts>
 8000532:	2300      	movs	r3, #0
 8000534:	627b      	str	r3, [r7, #36]	; 0x24
 8000536:	e002      	b.n	800053e <main+0x366>
 8000538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800053a:	3301      	adds	r3, #1
 800053c:	627b      	str	r3, [r7, #36]	; 0x24
 800053e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000540:	f247 522f 	movw	r2, #29999	; 0x752f
 8000544:	4293      	cmp	r3, r2
 8000546:	d9f7      	bls.n	8000538 <main+0x360>
 8000548:	e02c      	b.n	80005a4 <main+0x3cc>
    		 case 2: printf("ROW:2 COL:4 CHAR:B \n"); for(delay=0;delay<30000;delay++); break;
 800054a:	4828      	ldr	r0, [pc, #160]	; (80005ec <main+0x414>)
 800054c:	f000 f9ea 	bl	8000924 <puts>
 8000550:	2300      	movs	r3, #0
 8000552:	627b      	str	r3, [r7, #36]	; 0x24
 8000554:	e002      	b.n	800055c <main+0x384>
 8000556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000558:	3301      	adds	r3, #1
 800055a:	627b      	str	r3, [r7, #36]	; 0x24
 800055c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800055e:	f247 522f 	movw	r2, #29999	; 0x752f
 8000562:	4293      	cmp	r3, r2
 8000564:	d9f7      	bls.n	8000556 <main+0x37e>
 8000566:	e01d      	b.n	80005a4 <main+0x3cc>
    		 case 4: printf("ROW:3 COL:4 CHAR:C \n"); for(delay=0;delay<30000;delay++); break;
 8000568:	4821      	ldr	r0, [pc, #132]	; (80005f0 <main+0x418>)
 800056a:	f000 f9db 	bl	8000924 <puts>
 800056e:	2300      	movs	r3, #0
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
 8000572:	e002      	b.n	800057a <main+0x3a2>
 8000574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000576:	3301      	adds	r3, #1
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
 800057a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800057c:	f247 522f 	movw	r2, #29999	; 0x752f
 8000580:	4293      	cmp	r3, r2
 8000582:	d9f7      	bls.n	8000574 <main+0x39c>
 8000584:	e00e      	b.n	80005a4 <main+0x3cc>
    		 case 8: printf("ROW:4 COL:3 CHAR:D \n"); for(delay=0;delay<30000;delay++); break;
 8000586:	481b      	ldr	r0, [pc, #108]	; (80005f4 <main+0x41c>)
 8000588:	f000 f9cc 	bl	8000924 <puts>
 800058c:	2300      	movs	r3, #0
 800058e:	627b      	str	r3, [r7, #36]	; 0x24
 8000590:	e002      	b.n	8000598 <main+0x3c0>
 8000592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000594:	3301      	adds	r3, #1
 8000596:	627b      	str	r3, [r7, #36]	; 0x24
 8000598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800059a:	f247 522f 	movw	r2, #29999	; 0x752f
 800059e:	4293      	cmp	r3, r2
 80005a0:	d9f7      	bls.n	8000592 <main+0x3ba>
 80005a2:	bf00      	nop
    		}
    		break;
 80005a4:	e005      	b.n	80005b2 <main+0x3da>
    		break;
 80005a6:	bf00      	nop
 80005a8:	e004      	b.n	80005b4 <main+0x3dc>
    		break;
 80005aa:	bf00      	nop
 80005ac:	e002      	b.n	80005b4 <main+0x3dc>
    		break;
 80005ae:	bf00      	nop
 80005b0:	e000      	b.n	80005b4 <main+0x3dc>
    		break;
 80005b2:	bf00      	nop
    	}
    	*OUTPUT_A &= 0x0000;
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
    	*INPUT_D &= 0x0000;
 80005be:	693b      	ldr	r3, [r7, #16]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	693b      	ldr	r3, [r7, #16]
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
    for(i=0;i<4;i++)
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	b25b      	sxtb	r3, r3
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	3301      	adds	r3, #1
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	b25b      	sxtb	r3, r3
 80005d4:	71fb      	strb	r3, [r7, #7]
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	b25b      	sxtb	r3, r3
 80005da:	2b03      	cmp	r3, #3
 80005dc:	f77f ae39 	ble.w	8000252 <main+0x7a>
 80005e0:	e634      	b.n	800024c <main+0x74>
 80005e2:	bf00      	nop
 80005e4:	08001338 	.word	0x08001338
 80005e8:	0800134c 	.word	0x0800134c
 80005ec:	08001360 	.word	0x08001360
 80005f0:	08001374 	.word	0x08001374
 80005f4:	08001388 	.word	0x08001388

080005f8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <ITM_SendChar+0x48>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <ITM_SendChar+0x48>)
 8000608:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800060c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <ITM_SendChar+0x4c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a0c      	ldr	r2, [pc, #48]	; (8000644 <ITM_SendChar+0x4c>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800061a:	bf00      	nop
 800061c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	2b00      	cmp	r3, #0
 8000628:	d0f8      	beq.n	800061c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800062a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	6013      	str	r3, [r2, #0]
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	e000edfc 	.word	0xe000edfc
 8000644:	e0000e00 	.word	0xe0000e00

08000648 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
 8000658:	e00a      	b.n	8000670 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800065a:	f3af 8000 	nop.w
 800065e:	4601      	mov	r1, r0
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	60ba      	str	r2, [r7, #8]
 8000666:	b2ca      	uxtb	r2, r1
 8000668:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	3301      	adds	r3, #1
 800066e:	617b      	str	r3, [r7, #20]
 8000670:	697a      	ldr	r2, [r7, #20]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	429a      	cmp	r2, r3
 8000676:	dbf0      	blt.n	800065a <_read+0x12>
	}

return len;
 8000678:	687b      	ldr	r3, [r7, #4]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3718      	adds	r7, #24
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	b086      	sub	sp, #24
 8000686:	af00      	add	r7, sp, #0
 8000688:	60f8      	str	r0, [r7, #12]
 800068a:	60b9      	str	r1, [r7, #8]
 800068c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
 8000692:	e009      	b.n	80006a8 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	1c5a      	adds	r2, r3, #1
 8000698:	60ba      	str	r2, [r7, #8]
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ffab 	bl	80005f8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	3301      	adds	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
 80006a8:	697a      	ldr	r2, [r7, #20]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	dbf1      	blt.n	8000694 <_write+0x12>
		//__io_putchar(*ptr++);
	}
	return len;
 80006b0:	687b      	ldr	r3, [r7, #4]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3718      	adds	r7, #24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <_close>:

int _close(int file)
{
 80006ba:	b480      	push	{r7}
 80006bc:	b083      	sub	sp, #12
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
	return -1;
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006d2:	b480      	push	{r7}
 80006d4:	b083      	sub	sp, #12
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
 80006da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006e2:	605a      	str	r2, [r3, #4]
	return 0;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <_isatty>:

int _isatty(int file)
{
 80006f2:	b480      	push	{r7}
 80006f4:	b083      	sub	sp, #12
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
	return 1;
 80006fa:	2301      	movs	r3, #1
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
	return 0;
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
	...

08000724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800072c:	4a14      	ldr	r2, [pc, #80]	; (8000780 <_sbrk+0x5c>)
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <_sbrk+0x60>)
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <_sbrk+0x64>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d102      	bne.n	8000746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <_sbrk+0x64>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <_sbrk+0x68>)
 8000744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <_sbrk+0x64>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4413      	add	r3, r2
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	429a      	cmp	r2, r3
 8000752:	d207      	bcs.n	8000764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000754:	f000 f846 	bl	80007e4 <__errno>
 8000758:	4603      	mov	r3, r0
 800075a:	220c      	movs	r2, #12
 800075c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800075e:	f04f 33ff 	mov.w	r3, #4294967295
 8000762:	e009      	b.n	8000778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <_sbrk+0x64>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <_sbrk+0x64>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4413      	add	r3, r2
 8000772:	4a05      	ldr	r2, [pc, #20]	; (8000788 <_sbrk+0x64>)
 8000774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000776:	68fb      	ldr	r3, [r7, #12]
}
 8000778:	4618      	mov	r0, r3
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20020000 	.word	0x20020000
 8000784:	00000400 	.word	0x00000400
 8000788:	20000080 	.word	0x20000080
 800078c:	20000098 	.word	0x20000098

08000790 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000790:	480d      	ldr	r0, [pc, #52]	; (80007c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000792:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000794:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <LoopForever+0x6>)
  ldr r1, =_edata
 800079a:	490d      	ldr	r1, [pc, #52]	; (80007d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800079c:	4a0d      	ldr	r2, [pc, #52]	; (80007d4 <LoopForever+0xe>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a0:	e002      	b.n	80007a8 <LoopCopyDataInit>

080007a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007a6:	3304      	adds	r3, #4

080007a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007ac:	d3f9      	bcc.n	80007a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ae:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007b0:	4c0a      	ldr	r4, [pc, #40]	; (80007dc <LoopForever+0x16>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b4:	e001      	b.n	80007ba <LoopFillZerobss>

080007b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b8:	3204      	adds	r2, #4

080007ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007bc:	d3fb      	bcc.n	80007b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007be:	f000 f817 	bl	80007f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007c2:	f7ff fd09 	bl	80001d8 <main>

080007c6 <LoopForever>:

LoopForever:
    b LoopForever
 80007c6:	e7fe      	b.n	80007c6 <LoopForever>
  ldr   r0, =_estack
 80007c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80007d4:	08001408 	.word	0x08001408
  ldr r2, =_sbss
 80007d8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80007dc:	20000094 	.word	0x20000094

080007e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e0:	e7fe      	b.n	80007e0 <ADC_IRQHandler>
	...

080007e4 <__errno>:
 80007e4:	4b01      	ldr	r3, [pc, #4]	; (80007ec <__errno+0x8>)
 80007e6:	6818      	ldr	r0, [r3, #0]
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	20000000 	.word	0x20000000

080007f0 <__libc_init_array>:
 80007f0:	b570      	push	{r4, r5, r6, lr}
 80007f2:	4d0d      	ldr	r5, [pc, #52]	; (8000828 <__libc_init_array+0x38>)
 80007f4:	4c0d      	ldr	r4, [pc, #52]	; (800082c <__libc_init_array+0x3c>)
 80007f6:	1b64      	subs	r4, r4, r5
 80007f8:	10a4      	asrs	r4, r4, #2
 80007fa:	2600      	movs	r6, #0
 80007fc:	42a6      	cmp	r6, r4
 80007fe:	d109      	bne.n	8000814 <__libc_init_array+0x24>
 8000800:	4d0b      	ldr	r5, [pc, #44]	; (8000830 <__libc_init_array+0x40>)
 8000802:	4c0c      	ldr	r4, [pc, #48]	; (8000834 <__libc_init_array+0x44>)
 8000804:	f000 fd1e 	bl	8001244 <_init>
 8000808:	1b64      	subs	r4, r4, r5
 800080a:	10a4      	asrs	r4, r4, #2
 800080c:	2600      	movs	r6, #0
 800080e:	42a6      	cmp	r6, r4
 8000810:	d105      	bne.n	800081e <__libc_init_array+0x2e>
 8000812:	bd70      	pop	{r4, r5, r6, pc}
 8000814:	f855 3b04 	ldr.w	r3, [r5], #4
 8000818:	4798      	blx	r3
 800081a:	3601      	adds	r6, #1
 800081c:	e7ee      	b.n	80007fc <__libc_init_array+0xc>
 800081e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000822:	4798      	blx	r3
 8000824:	3601      	adds	r6, #1
 8000826:	e7f2      	b.n	800080e <__libc_init_array+0x1e>
 8000828:	08001400 	.word	0x08001400
 800082c:	08001400 	.word	0x08001400
 8000830:	08001400 	.word	0x08001400
 8000834:	08001404 	.word	0x08001404

08000838 <memset>:
 8000838:	4402      	add	r2, r0
 800083a:	4603      	mov	r3, r0
 800083c:	4293      	cmp	r3, r2
 800083e:	d100      	bne.n	8000842 <memset+0xa>
 8000840:	4770      	bx	lr
 8000842:	f803 1b01 	strb.w	r1, [r3], #1
 8000846:	e7f9      	b.n	800083c <memset+0x4>

08000848 <_puts_r>:
 8000848:	b570      	push	{r4, r5, r6, lr}
 800084a:	460e      	mov	r6, r1
 800084c:	4605      	mov	r5, r0
 800084e:	b118      	cbz	r0, 8000858 <_puts_r+0x10>
 8000850:	6983      	ldr	r3, [r0, #24]
 8000852:	b90b      	cbnz	r3, 8000858 <_puts_r+0x10>
 8000854:	f000 fa48 	bl	8000ce8 <__sinit>
 8000858:	69ab      	ldr	r3, [r5, #24]
 800085a:	68ac      	ldr	r4, [r5, #8]
 800085c:	b913      	cbnz	r3, 8000864 <_puts_r+0x1c>
 800085e:	4628      	mov	r0, r5
 8000860:	f000 fa42 	bl	8000ce8 <__sinit>
 8000864:	4b2c      	ldr	r3, [pc, #176]	; (8000918 <_puts_r+0xd0>)
 8000866:	429c      	cmp	r4, r3
 8000868:	d120      	bne.n	80008ac <_puts_r+0x64>
 800086a:	686c      	ldr	r4, [r5, #4]
 800086c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800086e:	07db      	lsls	r3, r3, #31
 8000870:	d405      	bmi.n	800087e <_puts_r+0x36>
 8000872:	89a3      	ldrh	r3, [r4, #12]
 8000874:	0598      	lsls	r0, r3, #22
 8000876:	d402      	bmi.n	800087e <_puts_r+0x36>
 8000878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800087a:	f000 fad3 	bl	8000e24 <__retarget_lock_acquire_recursive>
 800087e:	89a3      	ldrh	r3, [r4, #12]
 8000880:	0719      	lsls	r1, r3, #28
 8000882:	d51d      	bpl.n	80008c0 <_puts_r+0x78>
 8000884:	6923      	ldr	r3, [r4, #16]
 8000886:	b1db      	cbz	r3, 80008c0 <_puts_r+0x78>
 8000888:	3e01      	subs	r6, #1
 800088a:	68a3      	ldr	r3, [r4, #8]
 800088c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000890:	3b01      	subs	r3, #1
 8000892:	60a3      	str	r3, [r4, #8]
 8000894:	bb39      	cbnz	r1, 80008e6 <_puts_r+0x9e>
 8000896:	2b00      	cmp	r3, #0
 8000898:	da38      	bge.n	800090c <_puts_r+0xc4>
 800089a:	4622      	mov	r2, r4
 800089c:	210a      	movs	r1, #10
 800089e:	4628      	mov	r0, r5
 80008a0:	f000 f848 	bl	8000934 <__swbuf_r>
 80008a4:	3001      	adds	r0, #1
 80008a6:	d011      	beq.n	80008cc <_puts_r+0x84>
 80008a8:	250a      	movs	r5, #10
 80008aa:	e011      	b.n	80008d0 <_puts_r+0x88>
 80008ac:	4b1b      	ldr	r3, [pc, #108]	; (800091c <_puts_r+0xd4>)
 80008ae:	429c      	cmp	r4, r3
 80008b0:	d101      	bne.n	80008b6 <_puts_r+0x6e>
 80008b2:	68ac      	ldr	r4, [r5, #8]
 80008b4:	e7da      	b.n	800086c <_puts_r+0x24>
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <_puts_r+0xd8>)
 80008b8:	429c      	cmp	r4, r3
 80008ba:	bf08      	it	eq
 80008bc:	68ec      	ldreq	r4, [r5, #12]
 80008be:	e7d5      	b.n	800086c <_puts_r+0x24>
 80008c0:	4621      	mov	r1, r4
 80008c2:	4628      	mov	r0, r5
 80008c4:	f000 f888 	bl	80009d8 <__swsetup_r>
 80008c8:	2800      	cmp	r0, #0
 80008ca:	d0dd      	beq.n	8000888 <_puts_r+0x40>
 80008cc:	f04f 35ff 	mov.w	r5, #4294967295
 80008d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80008d2:	07da      	lsls	r2, r3, #31
 80008d4:	d405      	bmi.n	80008e2 <_puts_r+0x9a>
 80008d6:	89a3      	ldrh	r3, [r4, #12]
 80008d8:	059b      	lsls	r3, r3, #22
 80008da:	d402      	bmi.n	80008e2 <_puts_r+0x9a>
 80008dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80008de:	f000 faa2 	bl	8000e26 <__retarget_lock_release_recursive>
 80008e2:	4628      	mov	r0, r5
 80008e4:	bd70      	pop	{r4, r5, r6, pc}
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	da04      	bge.n	80008f4 <_puts_r+0xac>
 80008ea:	69a2      	ldr	r2, [r4, #24]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	dc06      	bgt.n	80008fe <_puts_r+0xb6>
 80008f0:	290a      	cmp	r1, #10
 80008f2:	d004      	beq.n	80008fe <_puts_r+0xb6>
 80008f4:	6823      	ldr	r3, [r4, #0]
 80008f6:	1c5a      	adds	r2, r3, #1
 80008f8:	6022      	str	r2, [r4, #0]
 80008fa:	7019      	strb	r1, [r3, #0]
 80008fc:	e7c5      	b.n	800088a <_puts_r+0x42>
 80008fe:	4622      	mov	r2, r4
 8000900:	4628      	mov	r0, r5
 8000902:	f000 f817 	bl	8000934 <__swbuf_r>
 8000906:	3001      	adds	r0, #1
 8000908:	d1bf      	bne.n	800088a <_puts_r+0x42>
 800090a:	e7df      	b.n	80008cc <_puts_r+0x84>
 800090c:	6823      	ldr	r3, [r4, #0]
 800090e:	250a      	movs	r5, #10
 8000910:	1c5a      	adds	r2, r3, #1
 8000912:	6022      	str	r2, [r4, #0]
 8000914:	701d      	strb	r5, [r3, #0]
 8000916:	e7db      	b.n	80008d0 <_puts_r+0x88>
 8000918:	080013c0 	.word	0x080013c0
 800091c:	080013e0 	.word	0x080013e0
 8000920:	080013a0 	.word	0x080013a0

08000924 <puts>:
 8000924:	4b02      	ldr	r3, [pc, #8]	; (8000930 <puts+0xc>)
 8000926:	4601      	mov	r1, r0
 8000928:	6818      	ldr	r0, [r3, #0]
 800092a:	f7ff bf8d 	b.w	8000848 <_puts_r>
 800092e:	bf00      	nop
 8000930:	20000000 	.word	0x20000000

08000934 <__swbuf_r>:
 8000934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000936:	460e      	mov	r6, r1
 8000938:	4614      	mov	r4, r2
 800093a:	4605      	mov	r5, r0
 800093c:	b118      	cbz	r0, 8000946 <__swbuf_r+0x12>
 800093e:	6983      	ldr	r3, [r0, #24]
 8000940:	b90b      	cbnz	r3, 8000946 <__swbuf_r+0x12>
 8000942:	f000 f9d1 	bl	8000ce8 <__sinit>
 8000946:	4b21      	ldr	r3, [pc, #132]	; (80009cc <__swbuf_r+0x98>)
 8000948:	429c      	cmp	r4, r3
 800094a:	d12b      	bne.n	80009a4 <__swbuf_r+0x70>
 800094c:	686c      	ldr	r4, [r5, #4]
 800094e:	69a3      	ldr	r3, [r4, #24]
 8000950:	60a3      	str	r3, [r4, #8]
 8000952:	89a3      	ldrh	r3, [r4, #12]
 8000954:	071a      	lsls	r2, r3, #28
 8000956:	d52f      	bpl.n	80009b8 <__swbuf_r+0x84>
 8000958:	6923      	ldr	r3, [r4, #16]
 800095a:	b36b      	cbz	r3, 80009b8 <__swbuf_r+0x84>
 800095c:	6923      	ldr	r3, [r4, #16]
 800095e:	6820      	ldr	r0, [r4, #0]
 8000960:	1ac0      	subs	r0, r0, r3
 8000962:	6963      	ldr	r3, [r4, #20]
 8000964:	b2f6      	uxtb	r6, r6
 8000966:	4283      	cmp	r3, r0
 8000968:	4637      	mov	r7, r6
 800096a:	dc04      	bgt.n	8000976 <__swbuf_r+0x42>
 800096c:	4621      	mov	r1, r4
 800096e:	4628      	mov	r0, r5
 8000970:	f000 f926 	bl	8000bc0 <_fflush_r>
 8000974:	bb30      	cbnz	r0, 80009c4 <__swbuf_r+0x90>
 8000976:	68a3      	ldr	r3, [r4, #8]
 8000978:	3b01      	subs	r3, #1
 800097a:	60a3      	str	r3, [r4, #8]
 800097c:	6823      	ldr	r3, [r4, #0]
 800097e:	1c5a      	adds	r2, r3, #1
 8000980:	6022      	str	r2, [r4, #0]
 8000982:	701e      	strb	r6, [r3, #0]
 8000984:	6963      	ldr	r3, [r4, #20]
 8000986:	3001      	adds	r0, #1
 8000988:	4283      	cmp	r3, r0
 800098a:	d004      	beq.n	8000996 <__swbuf_r+0x62>
 800098c:	89a3      	ldrh	r3, [r4, #12]
 800098e:	07db      	lsls	r3, r3, #31
 8000990:	d506      	bpl.n	80009a0 <__swbuf_r+0x6c>
 8000992:	2e0a      	cmp	r6, #10
 8000994:	d104      	bne.n	80009a0 <__swbuf_r+0x6c>
 8000996:	4621      	mov	r1, r4
 8000998:	4628      	mov	r0, r5
 800099a:	f000 f911 	bl	8000bc0 <_fflush_r>
 800099e:	b988      	cbnz	r0, 80009c4 <__swbuf_r+0x90>
 80009a0:	4638      	mov	r0, r7
 80009a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <__swbuf_r+0x9c>)
 80009a6:	429c      	cmp	r4, r3
 80009a8:	d101      	bne.n	80009ae <__swbuf_r+0x7a>
 80009aa:	68ac      	ldr	r4, [r5, #8]
 80009ac:	e7cf      	b.n	800094e <__swbuf_r+0x1a>
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <__swbuf_r+0xa0>)
 80009b0:	429c      	cmp	r4, r3
 80009b2:	bf08      	it	eq
 80009b4:	68ec      	ldreq	r4, [r5, #12]
 80009b6:	e7ca      	b.n	800094e <__swbuf_r+0x1a>
 80009b8:	4621      	mov	r1, r4
 80009ba:	4628      	mov	r0, r5
 80009bc:	f000 f80c 	bl	80009d8 <__swsetup_r>
 80009c0:	2800      	cmp	r0, #0
 80009c2:	d0cb      	beq.n	800095c <__swbuf_r+0x28>
 80009c4:	f04f 37ff 	mov.w	r7, #4294967295
 80009c8:	e7ea      	b.n	80009a0 <__swbuf_r+0x6c>
 80009ca:	bf00      	nop
 80009cc:	080013c0 	.word	0x080013c0
 80009d0:	080013e0 	.word	0x080013e0
 80009d4:	080013a0 	.word	0x080013a0

080009d8 <__swsetup_r>:
 80009d8:	4b32      	ldr	r3, [pc, #200]	; (8000aa4 <__swsetup_r+0xcc>)
 80009da:	b570      	push	{r4, r5, r6, lr}
 80009dc:	681d      	ldr	r5, [r3, #0]
 80009de:	4606      	mov	r6, r0
 80009e0:	460c      	mov	r4, r1
 80009e2:	b125      	cbz	r5, 80009ee <__swsetup_r+0x16>
 80009e4:	69ab      	ldr	r3, [r5, #24]
 80009e6:	b913      	cbnz	r3, 80009ee <__swsetup_r+0x16>
 80009e8:	4628      	mov	r0, r5
 80009ea:	f000 f97d 	bl	8000ce8 <__sinit>
 80009ee:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <__swsetup_r+0xd0>)
 80009f0:	429c      	cmp	r4, r3
 80009f2:	d10f      	bne.n	8000a14 <__swsetup_r+0x3c>
 80009f4:	686c      	ldr	r4, [r5, #4]
 80009f6:	89a3      	ldrh	r3, [r4, #12]
 80009f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80009fc:	0719      	lsls	r1, r3, #28
 80009fe:	d42c      	bmi.n	8000a5a <__swsetup_r+0x82>
 8000a00:	06dd      	lsls	r5, r3, #27
 8000a02:	d411      	bmi.n	8000a28 <__swsetup_r+0x50>
 8000a04:	2309      	movs	r3, #9
 8000a06:	6033      	str	r3, [r6, #0]
 8000a08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000a0c:	81a3      	strh	r3, [r4, #12]
 8000a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a12:	e03e      	b.n	8000a92 <__swsetup_r+0xba>
 8000a14:	4b25      	ldr	r3, [pc, #148]	; (8000aac <__swsetup_r+0xd4>)
 8000a16:	429c      	cmp	r4, r3
 8000a18:	d101      	bne.n	8000a1e <__swsetup_r+0x46>
 8000a1a:	68ac      	ldr	r4, [r5, #8]
 8000a1c:	e7eb      	b.n	80009f6 <__swsetup_r+0x1e>
 8000a1e:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <__swsetup_r+0xd8>)
 8000a20:	429c      	cmp	r4, r3
 8000a22:	bf08      	it	eq
 8000a24:	68ec      	ldreq	r4, [r5, #12]
 8000a26:	e7e6      	b.n	80009f6 <__swsetup_r+0x1e>
 8000a28:	0758      	lsls	r0, r3, #29
 8000a2a:	d512      	bpl.n	8000a52 <__swsetup_r+0x7a>
 8000a2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a2e:	b141      	cbz	r1, 8000a42 <__swsetup_r+0x6a>
 8000a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a34:	4299      	cmp	r1, r3
 8000a36:	d002      	beq.n	8000a3e <__swsetup_r+0x66>
 8000a38:	4630      	mov	r0, r6
 8000a3a:	f000 fa5b 	bl	8000ef4 <_free_r>
 8000a3e:	2300      	movs	r3, #0
 8000a40:	6363      	str	r3, [r4, #52]	; 0x34
 8000a42:	89a3      	ldrh	r3, [r4, #12]
 8000a44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000a48:	81a3      	strh	r3, [r4, #12]
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	6063      	str	r3, [r4, #4]
 8000a4e:	6923      	ldr	r3, [r4, #16]
 8000a50:	6023      	str	r3, [r4, #0]
 8000a52:	89a3      	ldrh	r3, [r4, #12]
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	81a3      	strh	r3, [r4, #12]
 8000a5a:	6923      	ldr	r3, [r4, #16]
 8000a5c:	b94b      	cbnz	r3, 8000a72 <__swsetup_r+0x9a>
 8000a5e:	89a3      	ldrh	r3, [r4, #12]
 8000a60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a68:	d003      	beq.n	8000a72 <__swsetup_r+0x9a>
 8000a6a:	4621      	mov	r1, r4
 8000a6c:	4630      	mov	r0, r6
 8000a6e:	f000 fa01 	bl	8000e74 <__smakebuf_r>
 8000a72:	89a0      	ldrh	r0, [r4, #12]
 8000a74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a78:	f010 0301 	ands.w	r3, r0, #1
 8000a7c:	d00a      	beq.n	8000a94 <__swsetup_r+0xbc>
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60a3      	str	r3, [r4, #8]
 8000a82:	6963      	ldr	r3, [r4, #20]
 8000a84:	425b      	negs	r3, r3
 8000a86:	61a3      	str	r3, [r4, #24]
 8000a88:	6923      	ldr	r3, [r4, #16]
 8000a8a:	b943      	cbnz	r3, 8000a9e <__swsetup_r+0xc6>
 8000a8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000a90:	d1ba      	bne.n	8000a08 <__swsetup_r+0x30>
 8000a92:	bd70      	pop	{r4, r5, r6, pc}
 8000a94:	0781      	lsls	r1, r0, #30
 8000a96:	bf58      	it	pl
 8000a98:	6963      	ldrpl	r3, [r4, #20]
 8000a9a:	60a3      	str	r3, [r4, #8]
 8000a9c:	e7f4      	b.n	8000a88 <__swsetup_r+0xb0>
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	e7f7      	b.n	8000a92 <__swsetup_r+0xba>
 8000aa2:	bf00      	nop
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	080013c0 	.word	0x080013c0
 8000aac:	080013e0 	.word	0x080013e0
 8000ab0:	080013a0 	.word	0x080013a0

08000ab4 <__sflush_r>:
 8000ab4:	898a      	ldrh	r2, [r1, #12]
 8000ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000aba:	4605      	mov	r5, r0
 8000abc:	0710      	lsls	r0, r2, #28
 8000abe:	460c      	mov	r4, r1
 8000ac0:	d458      	bmi.n	8000b74 <__sflush_r+0xc0>
 8000ac2:	684b      	ldr	r3, [r1, #4]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	dc05      	bgt.n	8000ad4 <__sflush_r+0x20>
 8000ac8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	dc02      	bgt.n	8000ad4 <__sflush_r+0x20>
 8000ace:	2000      	movs	r0, #0
 8000ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ad4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d0f9      	beq.n	8000ace <__sflush_r+0x1a>
 8000ada:	2300      	movs	r3, #0
 8000adc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000ae0:	682f      	ldr	r7, [r5, #0]
 8000ae2:	602b      	str	r3, [r5, #0]
 8000ae4:	d032      	beq.n	8000b4c <__sflush_r+0x98>
 8000ae6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000ae8:	89a3      	ldrh	r3, [r4, #12]
 8000aea:	075a      	lsls	r2, r3, #29
 8000aec:	d505      	bpl.n	8000afa <__sflush_r+0x46>
 8000aee:	6863      	ldr	r3, [r4, #4]
 8000af0:	1ac0      	subs	r0, r0, r3
 8000af2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000af4:	b10b      	cbz	r3, 8000afa <__sflush_r+0x46>
 8000af6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000af8:	1ac0      	subs	r0, r0, r3
 8000afa:	2300      	movs	r3, #0
 8000afc:	4602      	mov	r2, r0
 8000afe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000b00:	6a21      	ldr	r1, [r4, #32]
 8000b02:	4628      	mov	r0, r5
 8000b04:	47b0      	blx	r6
 8000b06:	1c43      	adds	r3, r0, #1
 8000b08:	89a3      	ldrh	r3, [r4, #12]
 8000b0a:	d106      	bne.n	8000b1a <__sflush_r+0x66>
 8000b0c:	6829      	ldr	r1, [r5, #0]
 8000b0e:	291d      	cmp	r1, #29
 8000b10:	d82c      	bhi.n	8000b6c <__sflush_r+0xb8>
 8000b12:	4a2a      	ldr	r2, [pc, #168]	; (8000bbc <__sflush_r+0x108>)
 8000b14:	40ca      	lsrs	r2, r1
 8000b16:	07d6      	lsls	r6, r2, #31
 8000b18:	d528      	bpl.n	8000b6c <__sflush_r+0xb8>
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	6062      	str	r2, [r4, #4]
 8000b1e:	04d9      	lsls	r1, r3, #19
 8000b20:	6922      	ldr	r2, [r4, #16]
 8000b22:	6022      	str	r2, [r4, #0]
 8000b24:	d504      	bpl.n	8000b30 <__sflush_r+0x7c>
 8000b26:	1c42      	adds	r2, r0, #1
 8000b28:	d101      	bne.n	8000b2e <__sflush_r+0x7a>
 8000b2a:	682b      	ldr	r3, [r5, #0]
 8000b2c:	b903      	cbnz	r3, 8000b30 <__sflush_r+0x7c>
 8000b2e:	6560      	str	r0, [r4, #84]	; 0x54
 8000b30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b32:	602f      	str	r7, [r5, #0]
 8000b34:	2900      	cmp	r1, #0
 8000b36:	d0ca      	beq.n	8000ace <__sflush_r+0x1a>
 8000b38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b3c:	4299      	cmp	r1, r3
 8000b3e:	d002      	beq.n	8000b46 <__sflush_r+0x92>
 8000b40:	4628      	mov	r0, r5
 8000b42:	f000 f9d7 	bl	8000ef4 <_free_r>
 8000b46:	2000      	movs	r0, #0
 8000b48:	6360      	str	r0, [r4, #52]	; 0x34
 8000b4a:	e7c1      	b.n	8000ad0 <__sflush_r+0x1c>
 8000b4c:	6a21      	ldr	r1, [r4, #32]
 8000b4e:	2301      	movs	r3, #1
 8000b50:	4628      	mov	r0, r5
 8000b52:	47b0      	blx	r6
 8000b54:	1c41      	adds	r1, r0, #1
 8000b56:	d1c7      	bne.n	8000ae8 <__sflush_r+0x34>
 8000b58:	682b      	ldr	r3, [r5, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d0c4      	beq.n	8000ae8 <__sflush_r+0x34>
 8000b5e:	2b1d      	cmp	r3, #29
 8000b60:	d001      	beq.n	8000b66 <__sflush_r+0xb2>
 8000b62:	2b16      	cmp	r3, #22
 8000b64:	d101      	bne.n	8000b6a <__sflush_r+0xb6>
 8000b66:	602f      	str	r7, [r5, #0]
 8000b68:	e7b1      	b.n	8000ace <__sflush_r+0x1a>
 8000b6a:	89a3      	ldrh	r3, [r4, #12]
 8000b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b70:	81a3      	strh	r3, [r4, #12]
 8000b72:	e7ad      	b.n	8000ad0 <__sflush_r+0x1c>
 8000b74:	690f      	ldr	r7, [r1, #16]
 8000b76:	2f00      	cmp	r7, #0
 8000b78:	d0a9      	beq.n	8000ace <__sflush_r+0x1a>
 8000b7a:	0793      	lsls	r3, r2, #30
 8000b7c:	680e      	ldr	r6, [r1, #0]
 8000b7e:	bf08      	it	eq
 8000b80:	694b      	ldreq	r3, [r1, #20]
 8000b82:	600f      	str	r7, [r1, #0]
 8000b84:	bf18      	it	ne
 8000b86:	2300      	movne	r3, #0
 8000b88:	eba6 0807 	sub.w	r8, r6, r7
 8000b8c:	608b      	str	r3, [r1, #8]
 8000b8e:	f1b8 0f00 	cmp.w	r8, #0
 8000b92:	dd9c      	ble.n	8000ace <__sflush_r+0x1a>
 8000b94:	6a21      	ldr	r1, [r4, #32]
 8000b96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000b98:	4643      	mov	r3, r8
 8000b9a:	463a      	mov	r2, r7
 8000b9c:	4628      	mov	r0, r5
 8000b9e:	47b0      	blx	r6
 8000ba0:	2800      	cmp	r0, #0
 8000ba2:	dc06      	bgt.n	8000bb2 <__sflush_r+0xfe>
 8000ba4:	89a3      	ldrh	r3, [r4, #12]
 8000ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000baa:	81a3      	strh	r3, [r4, #12]
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	e78e      	b.n	8000ad0 <__sflush_r+0x1c>
 8000bb2:	4407      	add	r7, r0
 8000bb4:	eba8 0800 	sub.w	r8, r8, r0
 8000bb8:	e7e9      	b.n	8000b8e <__sflush_r+0xda>
 8000bba:	bf00      	nop
 8000bbc:	20400001 	.word	0x20400001

08000bc0 <_fflush_r>:
 8000bc0:	b538      	push	{r3, r4, r5, lr}
 8000bc2:	690b      	ldr	r3, [r1, #16]
 8000bc4:	4605      	mov	r5, r0
 8000bc6:	460c      	mov	r4, r1
 8000bc8:	b913      	cbnz	r3, 8000bd0 <_fflush_r+0x10>
 8000bca:	2500      	movs	r5, #0
 8000bcc:	4628      	mov	r0, r5
 8000bce:	bd38      	pop	{r3, r4, r5, pc}
 8000bd0:	b118      	cbz	r0, 8000bda <_fflush_r+0x1a>
 8000bd2:	6983      	ldr	r3, [r0, #24]
 8000bd4:	b90b      	cbnz	r3, 8000bda <_fflush_r+0x1a>
 8000bd6:	f000 f887 	bl	8000ce8 <__sinit>
 8000bda:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <_fflush_r+0x6c>)
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	d11b      	bne.n	8000c18 <_fflush_r+0x58>
 8000be0:	686c      	ldr	r4, [r5, #4]
 8000be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d0ef      	beq.n	8000bca <_fflush_r+0xa>
 8000bea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000bec:	07d0      	lsls	r0, r2, #31
 8000bee:	d404      	bmi.n	8000bfa <_fflush_r+0x3a>
 8000bf0:	0599      	lsls	r1, r3, #22
 8000bf2:	d402      	bmi.n	8000bfa <_fflush_r+0x3a>
 8000bf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000bf6:	f000 f915 	bl	8000e24 <__retarget_lock_acquire_recursive>
 8000bfa:	4628      	mov	r0, r5
 8000bfc:	4621      	mov	r1, r4
 8000bfe:	f7ff ff59 	bl	8000ab4 <__sflush_r>
 8000c02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000c04:	07da      	lsls	r2, r3, #31
 8000c06:	4605      	mov	r5, r0
 8000c08:	d4e0      	bmi.n	8000bcc <_fflush_r+0xc>
 8000c0a:	89a3      	ldrh	r3, [r4, #12]
 8000c0c:	059b      	lsls	r3, r3, #22
 8000c0e:	d4dd      	bmi.n	8000bcc <_fflush_r+0xc>
 8000c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c12:	f000 f908 	bl	8000e26 <__retarget_lock_release_recursive>
 8000c16:	e7d9      	b.n	8000bcc <_fflush_r+0xc>
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <_fflush_r+0x70>)
 8000c1a:	429c      	cmp	r4, r3
 8000c1c:	d101      	bne.n	8000c22 <_fflush_r+0x62>
 8000c1e:	68ac      	ldr	r4, [r5, #8]
 8000c20:	e7df      	b.n	8000be2 <_fflush_r+0x22>
 8000c22:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <_fflush_r+0x74>)
 8000c24:	429c      	cmp	r4, r3
 8000c26:	bf08      	it	eq
 8000c28:	68ec      	ldreq	r4, [r5, #12]
 8000c2a:	e7da      	b.n	8000be2 <_fflush_r+0x22>
 8000c2c:	080013c0 	.word	0x080013c0
 8000c30:	080013e0 	.word	0x080013e0
 8000c34:	080013a0 	.word	0x080013a0

08000c38 <std>:
 8000c38:	2300      	movs	r3, #0
 8000c3a:	b510      	push	{r4, lr}
 8000c3c:	4604      	mov	r4, r0
 8000c3e:	e9c0 3300 	strd	r3, r3, [r0]
 8000c42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000c46:	6083      	str	r3, [r0, #8]
 8000c48:	8181      	strh	r1, [r0, #12]
 8000c4a:	6643      	str	r3, [r0, #100]	; 0x64
 8000c4c:	81c2      	strh	r2, [r0, #14]
 8000c4e:	6183      	str	r3, [r0, #24]
 8000c50:	4619      	mov	r1, r3
 8000c52:	2208      	movs	r2, #8
 8000c54:	305c      	adds	r0, #92	; 0x5c
 8000c56:	f7ff fdef 	bl	8000838 <memset>
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <std+0x38>)
 8000c5c:	6263      	str	r3, [r4, #36]	; 0x24
 8000c5e:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <std+0x3c>)
 8000c60:	62a3      	str	r3, [r4, #40]	; 0x28
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <std+0x40>)
 8000c64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <std+0x44>)
 8000c68:	6224      	str	r4, [r4, #32]
 8000c6a:	6323      	str	r3, [r4, #48]	; 0x30
 8000c6c:	bd10      	pop	{r4, pc}
 8000c6e:	bf00      	nop
 8000c70:	080010d5 	.word	0x080010d5
 8000c74:	080010f7 	.word	0x080010f7
 8000c78:	0800112f 	.word	0x0800112f
 8000c7c:	08001153 	.word	0x08001153

08000c80 <_cleanup_r>:
 8000c80:	4901      	ldr	r1, [pc, #4]	; (8000c88 <_cleanup_r+0x8>)
 8000c82:	f000 b8af 	b.w	8000de4 <_fwalk_reent>
 8000c86:	bf00      	nop
 8000c88:	08000bc1 	.word	0x08000bc1

08000c8c <__sfmoreglue>:
 8000c8c:	b570      	push	{r4, r5, r6, lr}
 8000c8e:	2268      	movs	r2, #104	; 0x68
 8000c90:	1e4d      	subs	r5, r1, #1
 8000c92:	4355      	muls	r5, r2
 8000c94:	460e      	mov	r6, r1
 8000c96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000c9a:	f000 f997 	bl	8000fcc <_malloc_r>
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	b140      	cbz	r0, 8000cb4 <__sfmoreglue+0x28>
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	e9c0 1600 	strd	r1, r6, [r0]
 8000ca8:	300c      	adds	r0, #12
 8000caa:	60a0      	str	r0, [r4, #8]
 8000cac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000cb0:	f7ff fdc2 	bl	8000838 <memset>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	bd70      	pop	{r4, r5, r6, pc}

08000cb8 <__sfp_lock_acquire>:
 8000cb8:	4801      	ldr	r0, [pc, #4]	; (8000cc0 <__sfp_lock_acquire+0x8>)
 8000cba:	f000 b8b3 	b.w	8000e24 <__retarget_lock_acquire_recursive>
 8000cbe:	bf00      	nop
 8000cc0:	20000085 	.word	0x20000085

08000cc4 <__sfp_lock_release>:
 8000cc4:	4801      	ldr	r0, [pc, #4]	; (8000ccc <__sfp_lock_release+0x8>)
 8000cc6:	f000 b8ae 	b.w	8000e26 <__retarget_lock_release_recursive>
 8000cca:	bf00      	nop
 8000ccc:	20000085 	.word	0x20000085

08000cd0 <__sinit_lock_acquire>:
 8000cd0:	4801      	ldr	r0, [pc, #4]	; (8000cd8 <__sinit_lock_acquire+0x8>)
 8000cd2:	f000 b8a7 	b.w	8000e24 <__retarget_lock_acquire_recursive>
 8000cd6:	bf00      	nop
 8000cd8:	20000086 	.word	0x20000086

08000cdc <__sinit_lock_release>:
 8000cdc:	4801      	ldr	r0, [pc, #4]	; (8000ce4 <__sinit_lock_release+0x8>)
 8000cde:	f000 b8a2 	b.w	8000e26 <__retarget_lock_release_recursive>
 8000ce2:	bf00      	nop
 8000ce4:	20000086 	.word	0x20000086

08000ce8 <__sinit>:
 8000ce8:	b510      	push	{r4, lr}
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fff0 	bl	8000cd0 <__sinit_lock_acquire>
 8000cf0:	69a3      	ldr	r3, [r4, #24]
 8000cf2:	b11b      	cbz	r3, 8000cfc <__sinit+0x14>
 8000cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000cf8:	f7ff bff0 	b.w	8000cdc <__sinit_lock_release>
 8000cfc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000d00:	6523      	str	r3, [r4, #80]	; 0x50
 8000d02:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <__sinit+0x68>)
 8000d04:	4a13      	ldr	r2, [pc, #76]	; (8000d54 <__sinit+0x6c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	62a2      	str	r2, [r4, #40]	; 0x28
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	bf04      	itt	eq
 8000d0e:	2301      	moveq	r3, #1
 8000d10:	61a3      	streq	r3, [r4, #24]
 8000d12:	4620      	mov	r0, r4
 8000d14:	f000 f820 	bl	8000d58 <__sfp>
 8000d18:	6060      	str	r0, [r4, #4]
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	f000 f81c 	bl	8000d58 <__sfp>
 8000d20:	60a0      	str	r0, [r4, #8]
 8000d22:	4620      	mov	r0, r4
 8000d24:	f000 f818 	bl	8000d58 <__sfp>
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60e0      	str	r0, [r4, #12]
 8000d2c:	2104      	movs	r1, #4
 8000d2e:	6860      	ldr	r0, [r4, #4]
 8000d30:	f7ff ff82 	bl	8000c38 <std>
 8000d34:	68a0      	ldr	r0, [r4, #8]
 8000d36:	2201      	movs	r2, #1
 8000d38:	2109      	movs	r1, #9
 8000d3a:	f7ff ff7d 	bl	8000c38 <std>
 8000d3e:	68e0      	ldr	r0, [r4, #12]
 8000d40:	2202      	movs	r2, #2
 8000d42:	2112      	movs	r1, #18
 8000d44:	f7ff ff78 	bl	8000c38 <std>
 8000d48:	2301      	movs	r3, #1
 8000d4a:	61a3      	str	r3, [r4, #24]
 8000d4c:	e7d2      	b.n	8000cf4 <__sinit+0xc>
 8000d4e:	bf00      	nop
 8000d50:	0800139c 	.word	0x0800139c
 8000d54:	08000c81 	.word	0x08000c81

08000d58 <__sfp>:
 8000d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d5a:	4607      	mov	r7, r0
 8000d5c:	f7ff ffac 	bl	8000cb8 <__sfp_lock_acquire>
 8000d60:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <__sfp+0x84>)
 8000d62:	681e      	ldr	r6, [r3, #0]
 8000d64:	69b3      	ldr	r3, [r6, #24]
 8000d66:	b913      	cbnz	r3, 8000d6e <__sfp+0x16>
 8000d68:	4630      	mov	r0, r6
 8000d6a:	f7ff ffbd 	bl	8000ce8 <__sinit>
 8000d6e:	3648      	adds	r6, #72	; 0x48
 8000d70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	d503      	bpl.n	8000d80 <__sfp+0x28>
 8000d78:	6833      	ldr	r3, [r6, #0]
 8000d7a:	b30b      	cbz	r3, 8000dc0 <__sfp+0x68>
 8000d7c:	6836      	ldr	r6, [r6, #0]
 8000d7e:	e7f7      	b.n	8000d70 <__sfp+0x18>
 8000d80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000d84:	b9d5      	cbnz	r5, 8000dbc <__sfp+0x64>
 8000d86:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <__sfp+0x88>)
 8000d88:	60e3      	str	r3, [r4, #12]
 8000d8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000d8e:	6665      	str	r5, [r4, #100]	; 0x64
 8000d90:	f000 f847 	bl	8000e22 <__retarget_lock_init_recursive>
 8000d94:	f7ff ff96 	bl	8000cc4 <__sfp_lock_release>
 8000d98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000d9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000da0:	6025      	str	r5, [r4, #0]
 8000da2:	61a5      	str	r5, [r4, #24]
 8000da4:	2208      	movs	r2, #8
 8000da6:	4629      	mov	r1, r5
 8000da8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000dac:	f7ff fd44 	bl	8000838 <memset>
 8000db0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000db4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000db8:	4620      	mov	r0, r4
 8000dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dbc:	3468      	adds	r4, #104	; 0x68
 8000dbe:	e7d9      	b.n	8000d74 <__sfp+0x1c>
 8000dc0:	2104      	movs	r1, #4
 8000dc2:	4638      	mov	r0, r7
 8000dc4:	f7ff ff62 	bl	8000c8c <__sfmoreglue>
 8000dc8:	4604      	mov	r4, r0
 8000dca:	6030      	str	r0, [r6, #0]
 8000dcc:	2800      	cmp	r0, #0
 8000dce:	d1d5      	bne.n	8000d7c <__sfp+0x24>
 8000dd0:	f7ff ff78 	bl	8000cc4 <__sfp_lock_release>
 8000dd4:	230c      	movs	r3, #12
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	e7ee      	b.n	8000db8 <__sfp+0x60>
 8000dda:	bf00      	nop
 8000ddc:	0800139c 	.word	0x0800139c
 8000de0:	ffff0001 	.word	0xffff0001

08000de4 <_fwalk_reent>:
 8000de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000de8:	4606      	mov	r6, r0
 8000dea:	4688      	mov	r8, r1
 8000dec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000df0:	2700      	movs	r7, #0
 8000df2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000df6:	f1b9 0901 	subs.w	r9, r9, #1
 8000dfa:	d505      	bpl.n	8000e08 <_fwalk_reent+0x24>
 8000dfc:	6824      	ldr	r4, [r4, #0]
 8000dfe:	2c00      	cmp	r4, #0
 8000e00:	d1f7      	bne.n	8000df2 <_fwalk_reent+0xe>
 8000e02:	4638      	mov	r0, r7
 8000e04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e08:	89ab      	ldrh	r3, [r5, #12]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d907      	bls.n	8000e1e <_fwalk_reent+0x3a>
 8000e0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e12:	3301      	adds	r3, #1
 8000e14:	d003      	beq.n	8000e1e <_fwalk_reent+0x3a>
 8000e16:	4629      	mov	r1, r5
 8000e18:	4630      	mov	r0, r6
 8000e1a:	47c0      	blx	r8
 8000e1c:	4307      	orrs	r7, r0
 8000e1e:	3568      	adds	r5, #104	; 0x68
 8000e20:	e7e9      	b.n	8000df6 <_fwalk_reent+0x12>

08000e22 <__retarget_lock_init_recursive>:
 8000e22:	4770      	bx	lr

08000e24 <__retarget_lock_acquire_recursive>:
 8000e24:	4770      	bx	lr

08000e26 <__retarget_lock_release_recursive>:
 8000e26:	4770      	bx	lr

08000e28 <__swhatbuf_r>:
 8000e28:	b570      	push	{r4, r5, r6, lr}
 8000e2a:	460e      	mov	r6, r1
 8000e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e30:	2900      	cmp	r1, #0
 8000e32:	b096      	sub	sp, #88	; 0x58
 8000e34:	4614      	mov	r4, r2
 8000e36:	461d      	mov	r5, r3
 8000e38:	da08      	bge.n	8000e4c <__swhatbuf_r+0x24>
 8000e3a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	602a      	str	r2, [r5, #0]
 8000e42:	061a      	lsls	r2, r3, #24
 8000e44:	d410      	bmi.n	8000e68 <__swhatbuf_r+0x40>
 8000e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e4a:	e00e      	b.n	8000e6a <__swhatbuf_r+0x42>
 8000e4c:	466a      	mov	r2, sp
 8000e4e:	f000 f9a7 	bl	80011a0 <_fstat_r>
 8000e52:	2800      	cmp	r0, #0
 8000e54:	dbf1      	blt.n	8000e3a <__swhatbuf_r+0x12>
 8000e56:	9a01      	ldr	r2, [sp, #4]
 8000e58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000e5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000e60:	425a      	negs	r2, r3
 8000e62:	415a      	adcs	r2, r3
 8000e64:	602a      	str	r2, [r5, #0]
 8000e66:	e7ee      	b.n	8000e46 <__swhatbuf_r+0x1e>
 8000e68:	2340      	movs	r3, #64	; 0x40
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	6023      	str	r3, [r4, #0]
 8000e6e:	b016      	add	sp, #88	; 0x58
 8000e70:	bd70      	pop	{r4, r5, r6, pc}
	...

08000e74 <__smakebuf_r>:
 8000e74:	898b      	ldrh	r3, [r1, #12]
 8000e76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e78:	079d      	lsls	r5, r3, #30
 8000e7a:	4606      	mov	r6, r0
 8000e7c:	460c      	mov	r4, r1
 8000e7e:	d507      	bpl.n	8000e90 <__smakebuf_r+0x1c>
 8000e80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000e84:	6023      	str	r3, [r4, #0]
 8000e86:	6123      	str	r3, [r4, #16]
 8000e88:	2301      	movs	r3, #1
 8000e8a:	6163      	str	r3, [r4, #20]
 8000e8c:	b002      	add	sp, #8
 8000e8e:	bd70      	pop	{r4, r5, r6, pc}
 8000e90:	ab01      	add	r3, sp, #4
 8000e92:	466a      	mov	r2, sp
 8000e94:	f7ff ffc8 	bl	8000e28 <__swhatbuf_r>
 8000e98:	9900      	ldr	r1, [sp, #0]
 8000e9a:	4605      	mov	r5, r0
 8000e9c:	4630      	mov	r0, r6
 8000e9e:	f000 f895 	bl	8000fcc <_malloc_r>
 8000ea2:	b948      	cbnz	r0, 8000eb8 <__smakebuf_r+0x44>
 8000ea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ea8:	059a      	lsls	r2, r3, #22
 8000eaa:	d4ef      	bmi.n	8000e8c <__smakebuf_r+0x18>
 8000eac:	f023 0303 	bic.w	r3, r3, #3
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	81a3      	strh	r3, [r4, #12]
 8000eb6:	e7e3      	b.n	8000e80 <__smakebuf_r+0xc>
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <__smakebuf_r+0x7c>)
 8000eba:	62b3      	str	r3, [r6, #40]	; 0x28
 8000ebc:	89a3      	ldrh	r3, [r4, #12]
 8000ebe:	6020      	str	r0, [r4, #0]
 8000ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec4:	81a3      	strh	r3, [r4, #12]
 8000ec6:	9b00      	ldr	r3, [sp, #0]
 8000ec8:	6163      	str	r3, [r4, #20]
 8000eca:	9b01      	ldr	r3, [sp, #4]
 8000ecc:	6120      	str	r0, [r4, #16]
 8000ece:	b15b      	cbz	r3, 8000ee8 <__smakebuf_r+0x74>
 8000ed0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ed4:	4630      	mov	r0, r6
 8000ed6:	f000 f975 	bl	80011c4 <_isatty_r>
 8000eda:	b128      	cbz	r0, 8000ee8 <__smakebuf_r+0x74>
 8000edc:	89a3      	ldrh	r3, [r4, #12]
 8000ede:	f023 0303 	bic.w	r3, r3, #3
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	81a3      	strh	r3, [r4, #12]
 8000ee8:	89a0      	ldrh	r0, [r4, #12]
 8000eea:	4305      	orrs	r5, r0
 8000eec:	81a5      	strh	r5, [r4, #12]
 8000eee:	e7cd      	b.n	8000e8c <__smakebuf_r+0x18>
 8000ef0:	08000c81 	.word	0x08000c81

08000ef4 <_free_r>:
 8000ef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000ef6:	2900      	cmp	r1, #0
 8000ef8:	d044      	beq.n	8000f84 <_free_r+0x90>
 8000efa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000efe:	9001      	str	r0, [sp, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f1a1 0404 	sub.w	r4, r1, #4
 8000f06:	bfb8      	it	lt
 8000f08:	18e4      	addlt	r4, r4, r3
 8000f0a:	f000 f97d 	bl	8001208 <__malloc_lock>
 8000f0e:	4a1e      	ldr	r2, [pc, #120]	; (8000f88 <_free_r+0x94>)
 8000f10:	9801      	ldr	r0, [sp, #4]
 8000f12:	6813      	ldr	r3, [r2, #0]
 8000f14:	b933      	cbnz	r3, 8000f24 <_free_r+0x30>
 8000f16:	6063      	str	r3, [r4, #4]
 8000f18:	6014      	str	r4, [r2, #0]
 8000f1a:	b003      	add	sp, #12
 8000f1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000f20:	f000 b978 	b.w	8001214 <__malloc_unlock>
 8000f24:	42a3      	cmp	r3, r4
 8000f26:	d908      	bls.n	8000f3a <_free_r+0x46>
 8000f28:	6825      	ldr	r5, [r4, #0]
 8000f2a:	1961      	adds	r1, r4, r5
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	bf01      	itttt	eq
 8000f30:	6819      	ldreq	r1, [r3, #0]
 8000f32:	685b      	ldreq	r3, [r3, #4]
 8000f34:	1949      	addeq	r1, r1, r5
 8000f36:	6021      	streq	r1, [r4, #0]
 8000f38:	e7ed      	b.n	8000f16 <_free_r+0x22>
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	b10b      	cbz	r3, 8000f44 <_free_r+0x50>
 8000f40:	42a3      	cmp	r3, r4
 8000f42:	d9fa      	bls.n	8000f3a <_free_r+0x46>
 8000f44:	6811      	ldr	r1, [r2, #0]
 8000f46:	1855      	adds	r5, r2, r1
 8000f48:	42a5      	cmp	r5, r4
 8000f4a:	d10b      	bne.n	8000f64 <_free_r+0x70>
 8000f4c:	6824      	ldr	r4, [r4, #0]
 8000f4e:	4421      	add	r1, r4
 8000f50:	1854      	adds	r4, r2, r1
 8000f52:	42a3      	cmp	r3, r4
 8000f54:	6011      	str	r1, [r2, #0]
 8000f56:	d1e0      	bne.n	8000f1a <_free_r+0x26>
 8000f58:	681c      	ldr	r4, [r3, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	6053      	str	r3, [r2, #4]
 8000f5e:	4421      	add	r1, r4
 8000f60:	6011      	str	r1, [r2, #0]
 8000f62:	e7da      	b.n	8000f1a <_free_r+0x26>
 8000f64:	d902      	bls.n	8000f6c <_free_r+0x78>
 8000f66:	230c      	movs	r3, #12
 8000f68:	6003      	str	r3, [r0, #0]
 8000f6a:	e7d6      	b.n	8000f1a <_free_r+0x26>
 8000f6c:	6825      	ldr	r5, [r4, #0]
 8000f6e:	1961      	adds	r1, r4, r5
 8000f70:	428b      	cmp	r3, r1
 8000f72:	bf04      	itt	eq
 8000f74:	6819      	ldreq	r1, [r3, #0]
 8000f76:	685b      	ldreq	r3, [r3, #4]
 8000f78:	6063      	str	r3, [r4, #4]
 8000f7a:	bf04      	itt	eq
 8000f7c:	1949      	addeq	r1, r1, r5
 8000f7e:	6021      	streq	r1, [r4, #0]
 8000f80:	6054      	str	r4, [r2, #4]
 8000f82:	e7ca      	b.n	8000f1a <_free_r+0x26>
 8000f84:	b003      	add	sp, #12
 8000f86:	bd30      	pop	{r4, r5, pc}
 8000f88:	20000088 	.word	0x20000088

08000f8c <sbrk_aligned>:
 8000f8c:	b570      	push	{r4, r5, r6, lr}
 8000f8e:	4e0e      	ldr	r6, [pc, #56]	; (8000fc8 <sbrk_aligned+0x3c>)
 8000f90:	460c      	mov	r4, r1
 8000f92:	6831      	ldr	r1, [r6, #0]
 8000f94:	4605      	mov	r5, r0
 8000f96:	b911      	cbnz	r1, 8000f9e <sbrk_aligned+0x12>
 8000f98:	f000 f88c 	bl	80010b4 <_sbrk_r>
 8000f9c:	6030      	str	r0, [r6, #0]
 8000f9e:	4621      	mov	r1, r4
 8000fa0:	4628      	mov	r0, r5
 8000fa2:	f000 f887 	bl	80010b4 <_sbrk_r>
 8000fa6:	1c43      	adds	r3, r0, #1
 8000fa8:	d00a      	beq.n	8000fc0 <sbrk_aligned+0x34>
 8000faa:	1cc4      	adds	r4, r0, #3
 8000fac:	f024 0403 	bic.w	r4, r4, #3
 8000fb0:	42a0      	cmp	r0, r4
 8000fb2:	d007      	beq.n	8000fc4 <sbrk_aligned+0x38>
 8000fb4:	1a21      	subs	r1, r4, r0
 8000fb6:	4628      	mov	r0, r5
 8000fb8:	f000 f87c 	bl	80010b4 <_sbrk_r>
 8000fbc:	3001      	adds	r0, #1
 8000fbe:	d101      	bne.n	8000fc4 <sbrk_aligned+0x38>
 8000fc0:	f04f 34ff 	mov.w	r4, #4294967295
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	bd70      	pop	{r4, r5, r6, pc}
 8000fc8:	2000008c 	.word	0x2000008c

08000fcc <_malloc_r>:
 8000fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fd0:	1ccd      	adds	r5, r1, #3
 8000fd2:	f025 0503 	bic.w	r5, r5, #3
 8000fd6:	3508      	adds	r5, #8
 8000fd8:	2d0c      	cmp	r5, #12
 8000fda:	bf38      	it	cc
 8000fdc:	250c      	movcc	r5, #12
 8000fde:	2d00      	cmp	r5, #0
 8000fe0:	4607      	mov	r7, r0
 8000fe2:	db01      	blt.n	8000fe8 <_malloc_r+0x1c>
 8000fe4:	42a9      	cmp	r1, r5
 8000fe6:	d905      	bls.n	8000ff4 <_malloc_r+0x28>
 8000fe8:	230c      	movs	r3, #12
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	2600      	movs	r6, #0
 8000fee:	4630      	mov	r0, r6
 8000ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ff4:	4e2e      	ldr	r6, [pc, #184]	; (80010b0 <_malloc_r+0xe4>)
 8000ff6:	f000 f907 	bl	8001208 <__malloc_lock>
 8000ffa:	6833      	ldr	r3, [r6, #0]
 8000ffc:	461c      	mov	r4, r3
 8000ffe:	bb34      	cbnz	r4, 800104e <_malloc_r+0x82>
 8001000:	4629      	mov	r1, r5
 8001002:	4638      	mov	r0, r7
 8001004:	f7ff ffc2 	bl	8000f8c <sbrk_aligned>
 8001008:	1c43      	adds	r3, r0, #1
 800100a:	4604      	mov	r4, r0
 800100c:	d14d      	bne.n	80010aa <_malloc_r+0xde>
 800100e:	6834      	ldr	r4, [r6, #0]
 8001010:	4626      	mov	r6, r4
 8001012:	2e00      	cmp	r6, #0
 8001014:	d140      	bne.n	8001098 <_malloc_r+0xcc>
 8001016:	6823      	ldr	r3, [r4, #0]
 8001018:	4631      	mov	r1, r6
 800101a:	4638      	mov	r0, r7
 800101c:	eb04 0803 	add.w	r8, r4, r3
 8001020:	f000 f848 	bl	80010b4 <_sbrk_r>
 8001024:	4580      	cmp	r8, r0
 8001026:	d13a      	bne.n	800109e <_malloc_r+0xd2>
 8001028:	6821      	ldr	r1, [r4, #0]
 800102a:	3503      	adds	r5, #3
 800102c:	1a6d      	subs	r5, r5, r1
 800102e:	f025 0503 	bic.w	r5, r5, #3
 8001032:	3508      	adds	r5, #8
 8001034:	2d0c      	cmp	r5, #12
 8001036:	bf38      	it	cc
 8001038:	250c      	movcc	r5, #12
 800103a:	4629      	mov	r1, r5
 800103c:	4638      	mov	r0, r7
 800103e:	f7ff ffa5 	bl	8000f8c <sbrk_aligned>
 8001042:	3001      	adds	r0, #1
 8001044:	d02b      	beq.n	800109e <_malloc_r+0xd2>
 8001046:	6823      	ldr	r3, [r4, #0]
 8001048:	442b      	add	r3, r5
 800104a:	6023      	str	r3, [r4, #0]
 800104c:	e00e      	b.n	800106c <_malloc_r+0xa0>
 800104e:	6822      	ldr	r2, [r4, #0]
 8001050:	1b52      	subs	r2, r2, r5
 8001052:	d41e      	bmi.n	8001092 <_malloc_r+0xc6>
 8001054:	2a0b      	cmp	r2, #11
 8001056:	d916      	bls.n	8001086 <_malloc_r+0xba>
 8001058:	1961      	adds	r1, r4, r5
 800105a:	42a3      	cmp	r3, r4
 800105c:	6025      	str	r5, [r4, #0]
 800105e:	bf18      	it	ne
 8001060:	6059      	strne	r1, [r3, #4]
 8001062:	6863      	ldr	r3, [r4, #4]
 8001064:	bf08      	it	eq
 8001066:	6031      	streq	r1, [r6, #0]
 8001068:	5162      	str	r2, [r4, r5]
 800106a:	604b      	str	r3, [r1, #4]
 800106c:	4638      	mov	r0, r7
 800106e:	f104 060b 	add.w	r6, r4, #11
 8001072:	f000 f8cf 	bl	8001214 <__malloc_unlock>
 8001076:	f026 0607 	bic.w	r6, r6, #7
 800107a:	1d23      	adds	r3, r4, #4
 800107c:	1af2      	subs	r2, r6, r3
 800107e:	d0b6      	beq.n	8000fee <_malloc_r+0x22>
 8001080:	1b9b      	subs	r3, r3, r6
 8001082:	50a3      	str	r3, [r4, r2]
 8001084:	e7b3      	b.n	8000fee <_malloc_r+0x22>
 8001086:	6862      	ldr	r2, [r4, #4]
 8001088:	42a3      	cmp	r3, r4
 800108a:	bf0c      	ite	eq
 800108c:	6032      	streq	r2, [r6, #0]
 800108e:	605a      	strne	r2, [r3, #4]
 8001090:	e7ec      	b.n	800106c <_malloc_r+0xa0>
 8001092:	4623      	mov	r3, r4
 8001094:	6864      	ldr	r4, [r4, #4]
 8001096:	e7b2      	b.n	8000ffe <_malloc_r+0x32>
 8001098:	4634      	mov	r4, r6
 800109a:	6876      	ldr	r6, [r6, #4]
 800109c:	e7b9      	b.n	8001012 <_malloc_r+0x46>
 800109e:	230c      	movs	r3, #12
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	4638      	mov	r0, r7
 80010a4:	f000 f8b6 	bl	8001214 <__malloc_unlock>
 80010a8:	e7a1      	b.n	8000fee <_malloc_r+0x22>
 80010aa:	6025      	str	r5, [r4, #0]
 80010ac:	e7de      	b.n	800106c <_malloc_r+0xa0>
 80010ae:	bf00      	nop
 80010b0:	20000088 	.word	0x20000088

080010b4 <_sbrk_r>:
 80010b4:	b538      	push	{r3, r4, r5, lr}
 80010b6:	4d06      	ldr	r5, [pc, #24]	; (80010d0 <_sbrk_r+0x1c>)
 80010b8:	2300      	movs	r3, #0
 80010ba:	4604      	mov	r4, r0
 80010bc:	4608      	mov	r0, r1
 80010be:	602b      	str	r3, [r5, #0]
 80010c0:	f7ff fb30 	bl	8000724 <_sbrk>
 80010c4:	1c43      	adds	r3, r0, #1
 80010c6:	d102      	bne.n	80010ce <_sbrk_r+0x1a>
 80010c8:	682b      	ldr	r3, [r5, #0]
 80010ca:	b103      	cbz	r3, 80010ce <_sbrk_r+0x1a>
 80010cc:	6023      	str	r3, [r4, #0]
 80010ce:	bd38      	pop	{r3, r4, r5, pc}
 80010d0:	20000090 	.word	0x20000090

080010d4 <__sread>:
 80010d4:	b510      	push	{r4, lr}
 80010d6:	460c      	mov	r4, r1
 80010d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010dc:	f000 f8a0 	bl	8001220 <_read_r>
 80010e0:	2800      	cmp	r0, #0
 80010e2:	bfab      	itete	ge
 80010e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80010e6:	89a3      	ldrhlt	r3, [r4, #12]
 80010e8:	181b      	addge	r3, r3, r0
 80010ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80010ee:	bfac      	ite	ge
 80010f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80010f2:	81a3      	strhlt	r3, [r4, #12]
 80010f4:	bd10      	pop	{r4, pc}

080010f6 <__swrite>:
 80010f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010fa:	461f      	mov	r7, r3
 80010fc:	898b      	ldrh	r3, [r1, #12]
 80010fe:	05db      	lsls	r3, r3, #23
 8001100:	4605      	mov	r5, r0
 8001102:	460c      	mov	r4, r1
 8001104:	4616      	mov	r6, r2
 8001106:	d505      	bpl.n	8001114 <__swrite+0x1e>
 8001108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800110c:	2302      	movs	r3, #2
 800110e:	2200      	movs	r2, #0
 8001110:	f000 f868 	bl	80011e4 <_lseek_r>
 8001114:	89a3      	ldrh	r3, [r4, #12]
 8001116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800111a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800111e:	81a3      	strh	r3, [r4, #12]
 8001120:	4632      	mov	r2, r6
 8001122:	463b      	mov	r3, r7
 8001124:	4628      	mov	r0, r5
 8001126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800112a:	f000 b817 	b.w	800115c <_write_r>

0800112e <__sseek>:
 800112e:	b510      	push	{r4, lr}
 8001130:	460c      	mov	r4, r1
 8001132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001136:	f000 f855 	bl	80011e4 <_lseek_r>
 800113a:	1c43      	adds	r3, r0, #1
 800113c:	89a3      	ldrh	r3, [r4, #12]
 800113e:	bf15      	itete	ne
 8001140:	6560      	strne	r0, [r4, #84]	; 0x54
 8001142:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001146:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800114a:	81a3      	strheq	r3, [r4, #12]
 800114c:	bf18      	it	ne
 800114e:	81a3      	strhne	r3, [r4, #12]
 8001150:	bd10      	pop	{r4, pc}

08001152 <__sclose>:
 8001152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001156:	f000 b813 	b.w	8001180 <_close_r>
	...

0800115c <_write_r>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	4d07      	ldr	r5, [pc, #28]	; (800117c <_write_r+0x20>)
 8001160:	4604      	mov	r4, r0
 8001162:	4608      	mov	r0, r1
 8001164:	4611      	mov	r1, r2
 8001166:	2200      	movs	r2, #0
 8001168:	602a      	str	r2, [r5, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	f7ff fa89 	bl	8000682 <_write>
 8001170:	1c43      	adds	r3, r0, #1
 8001172:	d102      	bne.n	800117a <_write_r+0x1e>
 8001174:	682b      	ldr	r3, [r5, #0]
 8001176:	b103      	cbz	r3, 800117a <_write_r+0x1e>
 8001178:	6023      	str	r3, [r4, #0]
 800117a:	bd38      	pop	{r3, r4, r5, pc}
 800117c:	20000090 	.word	0x20000090

08001180 <_close_r>:
 8001180:	b538      	push	{r3, r4, r5, lr}
 8001182:	4d06      	ldr	r5, [pc, #24]	; (800119c <_close_r+0x1c>)
 8001184:	2300      	movs	r3, #0
 8001186:	4604      	mov	r4, r0
 8001188:	4608      	mov	r0, r1
 800118a:	602b      	str	r3, [r5, #0]
 800118c:	f7ff fa95 	bl	80006ba <_close>
 8001190:	1c43      	adds	r3, r0, #1
 8001192:	d102      	bne.n	800119a <_close_r+0x1a>
 8001194:	682b      	ldr	r3, [r5, #0]
 8001196:	b103      	cbz	r3, 800119a <_close_r+0x1a>
 8001198:	6023      	str	r3, [r4, #0]
 800119a:	bd38      	pop	{r3, r4, r5, pc}
 800119c:	20000090 	.word	0x20000090

080011a0 <_fstat_r>:
 80011a0:	b538      	push	{r3, r4, r5, lr}
 80011a2:	4d07      	ldr	r5, [pc, #28]	; (80011c0 <_fstat_r+0x20>)
 80011a4:	2300      	movs	r3, #0
 80011a6:	4604      	mov	r4, r0
 80011a8:	4608      	mov	r0, r1
 80011aa:	4611      	mov	r1, r2
 80011ac:	602b      	str	r3, [r5, #0]
 80011ae:	f7ff fa90 	bl	80006d2 <_fstat>
 80011b2:	1c43      	adds	r3, r0, #1
 80011b4:	d102      	bne.n	80011bc <_fstat_r+0x1c>
 80011b6:	682b      	ldr	r3, [r5, #0]
 80011b8:	b103      	cbz	r3, 80011bc <_fstat_r+0x1c>
 80011ba:	6023      	str	r3, [r4, #0]
 80011bc:	bd38      	pop	{r3, r4, r5, pc}
 80011be:	bf00      	nop
 80011c0:	20000090 	.word	0x20000090

080011c4 <_isatty_r>:
 80011c4:	b538      	push	{r3, r4, r5, lr}
 80011c6:	4d06      	ldr	r5, [pc, #24]	; (80011e0 <_isatty_r+0x1c>)
 80011c8:	2300      	movs	r3, #0
 80011ca:	4604      	mov	r4, r0
 80011cc:	4608      	mov	r0, r1
 80011ce:	602b      	str	r3, [r5, #0]
 80011d0:	f7ff fa8f 	bl	80006f2 <_isatty>
 80011d4:	1c43      	adds	r3, r0, #1
 80011d6:	d102      	bne.n	80011de <_isatty_r+0x1a>
 80011d8:	682b      	ldr	r3, [r5, #0]
 80011da:	b103      	cbz	r3, 80011de <_isatty_r+0x1a>
 80011dc:	6023      	str	r3, [r4, #0]
 80011de:	bd38      	pop	{r3, r4, r5, pc}
 80011e0:	20000090 	.word	0x20000090

080011e4 <_lseek_r>:
 80011e4:	b538      	push	{r3, r4, r5, lr}
 80011e6:	4d07      	ldr	r5, [pc, #28]	; (8001204 <_lseek_r+0x20>)
 80011e8:	4604      	mov	r4, r0
 80011ea:	4608      	mov	r0, r1
 80011ec:	4611      	mov	r1, r2
 80011ee:	2200      	movs	r2, #0
 80011f0:	602a      	str	r2, [r5, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	f7ff fa88 	bl	8000708 <_lseek>
 80011f8:	1c43      	adds	r3, r0, #1
 80011fa:	d102      	bne.n	8001202 <_lseek_r+0x1e>
 80011fc:	682b      	ldr	r3, [r5, #0]
 80011fe:	b103      	cbz	r3, 8001202 <_lseek_r+0x1e>
 8001200:	6023      	str	r3, [r4, #0]
 8001202:	bd38      	pop	{r3, r4, r5, pc}
 8001204:	20000090 	.word	0x20000090

08001208 <__malloc_lock>:
 8001208:	4801      	ldr	r0, [pc, #4]	; (8001210 <__malloc_lock+0x8>)
 800120a:	f7ff be0b 	b.w	8000e24 <__retarget_lock_acquire_recursive>
 800120e:	bf00      	nop
 8001210:	20000084 	.word	0x20000084

08001214 <__malloc_unlock>:
 8001214:	4801      	ldr	r0, [pc, #4]	; (800121c <__malloc_unlock+0x8>)
 8001216:	f7ff be06 	b.w	8000e26 <__retarget_lock_release_recursive>
 800121a:	bf00      	nop
 800121c:	20000084 	.word	0x20000084

08001220 <_read_r>:
 8001220:	b538      	push	{r3, r4, r5, lr}
 8001222:	4d07      	ldr	r5, [pc, #28]	; (8001240 <_read_r+0x20>)
 8001224:	4604      	mov	r4, r0
 8001226:	4608      	mov	r0, r1
 8001228:	4611      	mov	r1, r2
 800122a:	2200      	movs	r2, #0
 800122c:	602a      	str	r2, [r5, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	f7ff fa0a 	bl	8000648 <_read>
 8001234:	1c43      	adds	r3, r0, #1
 8001236:	d102      	bne.n	800123e <_read_r+0x1e>
 8001238:	682b      	ldr	r3, [r5, #0]
 800123a:	b103      	cbz	r3, 800123e <_read_r+0x1e>
 800123c:	6023      	str	r3, [r4, #0]
 800123e:	bd38      	pop	{r3, r4, r5, pc}
 8001240:	20000090 	.word	0x20000090

08001244 <_init>:
 8001244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001246:	bf00      	nop
 8001248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800124a:	bc08      	pop	{r3}
 800124c:	469e      	mov	lr, r3
 800124e:	4770      	bx	lr

08001250 <_fini>:
 8001250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001252:	bf00      	nop
 8001254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001256:	bc08      	pop	{r3}
 8001258:	469e      	mov	lr, r3
 800125a:	4770      	bx	lr
